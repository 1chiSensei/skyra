<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Skyra - Scout Mode</title>

    <!-- Bootstrap Core CSS -->
    <link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

    <!-- Theme CSS -->
    <link href="/css/skyra.min.css" rel="stylesheet">

    <!-- Custom Fonts -->
    <link href="/vendor/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic" rel="stylesheet" type="text/css">

    <style>
        body section.discord {
            padding: 0px;
        }

        body section.discord div.container-fluid {
            padding: 0px;
            margin: 0px;
        }

        body section.discord p {
            font-family: 'Noto Sans', sans-serif;
            font-size: 15px;
            line-height: 1.3em;
            white-space: pre-wrap;
            margin-top: 6px;
            word-wrap: break-word;
            margin: 0;
            padding: 0;
            border: 0;
            border-right: 35px;
        }

        body section.discord p.author-title {
            padding-bottom: 7px;
        }

        body section.discord small.timestamp {
            color: hsla(0, 0%, 100%, .2);
        }

        body section.discord p.author-title span {
            background-color: #7289DA;
            padding: .1em .3em .1em;
            font-weight: inherit;
        }

        body section.discord div.channels {
            background: #2F3136;
            color: hsla(0, 0%, 100%, .75);
        }

        body section.discord div.channels a {
            color: hsla(0, 0%, 100%, .75);
        }

        body section.discord div.channels a:focus,
        body section.discord div.channels a:hover {
            background-color: #36393F;
        }

        body section.discord div.wrapped-list::-webkit-scrollbar {
            width: 9px;
        }

        body section.discord div.wrapped-list::-webkit-scrollbar-corner {
            border: none;
            background: none;
        }

        body section.discord div.wrapped-list::-webkit-scrollbar-track,
        body section.discord div.wrapped-list::-webkit-scrollbar-thumb {
            border-color: transparent;
            -webkit-border-radius: 5px;
            border-radius: 5px;
            background-clip: padding-box;
            border-style: solid;
        }

        body section.discord div.wrapped-list::-webkit-scrollbar-thumb {
            background: #1E2124;
        }

        body section.discord div.wrapped-list::-webkit-scrollbar-track {
            background: #2F3136;
            border-width: initial;
        }

    </style>

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

</head>

<body>

    <link href="https://fonts.googleapis.com/css?family=Noto+Sans" rel="stylesheet">

    <section id="dashboard" class="inverse discord">
        <div class="container-fluid">
            <div class="col-md-3 channels wrapped-list">
                <%
                    const textChannels = [];
                    const voiceChannels = [];
                    const parse = (c, type) => `<li><a href="javascript:void(0)" onclick="requestData(endpoints.init(undefined, '${c.id}'));"><span class="glyphicon glyphicon-${type === "text" ? "comment" : "headphones"}"></span> ${c.name}</a></li>`;
                    for (const channel of guild.channels.sort((x, y) => +(x.position > y.position) || +(x.position === y.position) - 1).values()) {
                        if (channel.type === "text") textChannels.push(parse(channel, "text"));
                        else voiceChannels.push(parse(channel, "voice"));
                    }
                %>
                <%- `<div><h5>Text Channels</h5><ul class="nav nav-pills nav-stacked">${textChannels.join("\n")}</ul></div>`; %>
                <%- `<div><h5>Voice Channels</h5><ul class="nav nav-pills nav-stacked">${voiceChannels.join("\n")}</ul></div>`; %>
            </div>
            <div class="col-md-9 wrapped-list" id="data-list">
                <div id="data" class="mdcp">
                </div>
            </div>
        </div>
    </section>

    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/marked/0.3.6/marked.min.js"></script>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/monokai-sublime.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>

    <div class="modal" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="cmdModal" onclick="modal.style.display = 'none';">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <div class="list-group">
                        <button type="button" class="list-group-item" id ="modalCopy">Copy Message</button>
                        <button type="button" class="list-group-item list-group-item-warning" id ="modalPin">Pin Message</button>
                        <button type="button" class="list-group-item list-group-item-danger" id ="modalDelete" onclick="modal.style.display = 'none';">Delete Message</button>
                        <button type="button" class="list-group-item" id ="modalID">Copy ID</button>
                        <button type="button" class="list-group-item" id="closeModal" onclick="modal.style.display = 'none';">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const dataContainer = document.getElementById("data");

        const modal = document.getElementById("messageModal");

        const modalCopy = document.getElementById("modalCopy");
        const modalPin = document.getElementById("modalPin");
        const modalDelete = document.getElementById("modalDelete");
        const modalID = document.getElementById("modalID");

        const resolveEmoji = (emoji) => {
            const [, name, id] = /^<:(\w{2,32}):(\d{17,21})>$/.exec(emoji);
            return `<img draggable="false" src="https://cdn.discordapp.com/emojis/${id}.png" alt=":${name}:" width="22px" height="22px" align="middle">`
        }

        // const makeCodeblock = codeblock => `</p><div class="well well-sm">${codeblock.replace(/```/g, "")}</div><p>`;

        const buildMessage = (id, image, title, content, embeds) => `<div class="media" id="${id}"><div class="media-left"><a href="${image}"><img class="media-object img-circle" src="${image}" height="50px" width="50px"></a></div><div class="media-body">${title}${content}${embeds}</div></div>`;
        const buildButton = message => `<span style="float:right;" class="label label-info helpButton" data-toggle="modal" data-target="#cmdModal" data-id="${message.id}" data-deletable="${message.deletable}" data-pinnable="${message.pinnable}" data-content="${message.content.replace(/"/g, "&quot;")}"><span class="glyphicon glyphicon-option-vertical" aria-hidden="true"></span></span>`;
        const buildTitle = message => `<p class="media-heading text-left author-title">${message.author.tag}${message.author.bot ? " <span class=\"label label-default\">BOT</span>" : ""} <small class="timestamp">${moment(message.createdTimestamp).format("D/MM h:mm:ss")}</small></p>${buildButton(message)}`;
        const buildContent = content => marked(content.replace(/<:(\w{2,32}):(\d{17,21})>/g, resolveEmoji).replace(/[^`]```/g, match => `${match[0]}\n\`\`\``).trim());
        const buildAttachments = attachments => (attachments.size > 0 ? attachments.map(att => `<a href="${att.url}" class="thumbnail"><img src="${att.url}" class="img-rounded img-responsive"></a>`).join("") : "");

        const buildEmbed = (embed) => {
            if (embed.type === "image") return `<a href="${embed.url}" class="thumbnail"><img src="${embed.url}" class="img-rounded img-responsive"></a>`;
            if (embed.type === "video") return `<div class="embed-responsive embed-responsive-16by9"><iframe class="embed-responsive-item" src="${embed.video.url}"></iframe></div>`;
        }

        const buildEverything = message => buildMessage(message.id, message.author.avatar, buildTitle(message), [buildContent(message.content), buildAttachments(message.attachments)].join(""), message.embeds.map(buildEmbed));

        const base = (guild = "<%= guild.id %>", channel = "<%= channel.id %>", message = "") => `/api/guilds/${guild}/channels/${channel}/messages/${message}`;

        function requestData(request) {
            $.ajax(request).fail(err => alert(err.responseJSON.message));
        }

        function createClipboard (text) {
            const textArea = document.createElement("textarea");
            textArea.style.position = 'fixed';
            textArea.style.top = 0;
            textArea.style.left = 0;
            textArea.style.width = '2em';
            textArea.style.height = '2em';
            textArea.style.padding = 0;
            textArea.style.border = 'none';
            textArea.style.outline = 'none';
            textArea.style.boxShadow = 'none';
            textArea.style.background = 'transparent';
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert("Copied!");
        }

        const endpoints = {
            init: (guild = "<%= guild.id %>", channel = "<%= channel.id %>") => ({
                type: "GET",
                url: base(guild, channel),
                success: function(msg) {
                    const messageList = [];
                    for (const message of msg.data) messageList.push(buildEverything(message));
                    dataContainer.innerHTML = messageList.reverse().join("\n");
                    document.querySelectorAll("pre code").forEach(hljs.highlightBlock);
                    const dataList = document.getElementById("data-list");
                    dataList.scrollTop = dataList.scrollHeight;

                    function showMessage() {
                        modalCopy.onclick = () => createClipboard(this.attributes["data-content"].value);
                        if (this.attributes["data-pinnable"].value === "true") {
                            modalPin.classList.remove("disabled");
                            modalPin.onclick = () => requestData(endpoints.pinMessage(this.attributes["data-id"].value));
                        } else {
                            modalPin.classList.add("disabled");
                            modalPin.onclick = () => null;
                        }
                        if (this.attributes["data-deletable"].value === "true") {
                            modalDelete.classList.remove("disabled");
                            modalDelete.onclick = () => requestData(endpoints.delMessage(this.attributes["data-id"].value));
                        } else {
                            modalDelete.classList.add("disabled");
                            modalDelete.onclick = () => null;
                        }
                        modalID.onclick = () => createClipboard(this.attributes["data-id"].value);
                        modal.style.display = "inherit";
                    }

                    const helpButton = document.getElementsByClassName("helpButton");

                    Array.from(helpButton).forEach(function(element) {
                        element.addEventListener("click", showMessage);
                    });

                    window.history.pushState('Channel', 'Skyra', `/guilds/${guild}/${channel}/messages`);
                }
            }),
            delMessage: (message) => ({
                type: "DELETE",
                url: base(undefined, undefined, message),
                success: function(msg) {
                    dataContainer.removeChild(document.getElementById(message));
                    alert(`Successfully deleted the message ${message}`);
                }
            }),
            pinMessage: (message) => ({
                type: "POST",
                body: { action: "PIN" },
                url: base(undefined, undefined, message),
                success: function(msg) {
                    alert(`Successfully pinned the message ${message}`);
                }
            }),
            editMessage: (message, content) => ({
                type: "POST",
                body: { action: "EDIT", message: content },
                url: base(undefined, undefined, message),
                success: function(msg) {
                    alert(`Successfully edited the message ${message}`);
                }
            })
        }

        requestData(endpoints.init());
    </script>
</body>